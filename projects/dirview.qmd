

::::::{.grid}
:::{.g-col-10 .g-start-2}

When trying to think of an excuse to work in C and the Linux environemnt, I came across the 
annoying quibble of how incessant it can be to navidate with `cd` and `ls` repeatedly when you 
don't know where anything is. 

So I had the idea of a visual directory explorer where the user can explore with arrows keys, enter or space, alongside a fuzzy-search (`fzf`) to filter items within the current directory. 

It's not my intention to make the World's Next Best Linux Directory Explorer, but just a little fun project
I'd be happy to spend some time and learning on.

[GitHub  Repository <i class="bi bi-github"></i>](https://github.com/etscheelk/dirview)

:::
::::::

#### Current Status

::::::{.grid}
:::{.g-col-8 .g-start-3}

* The typing bar is in workable state and that's all that's needed right now. Next up is to display items in the current directory. Will also figure out how to get `fzf` to show just the items in the current directory.

* My experience in Godot has provided some background experience in using event/signal-based programming. 

* Used fork exec pattern, piping, dirent, and fzf to
  * read current directory contents and write to file
  * read said file and send to fzf to be fuzzy filtered
  * output filtered contents to new file
* It works!.... when standalone.
* When implemented in main file, it breaks the window. Since fork replicates the memory space, I now have two tickit terminals running.
* Checked out vfork and clone?
* Next idea is to fork a thread at the start of main to run as a companion. Could also create a pipe or two for communication between them. 

:::
::::::


#### Roadblocks

::::::{.grid}
:::{.g-col-8 .g-start-3}

Use of this TUI library has provided some challenges. 
Though a documentation page exists, it is insufficient for my tastes. 
It seems to provide brief comments helpful mostly to a person already familiar with the library.
Example projects are the only way to begin to parse the unknown territory. 

Some other required documetation is also missing: It is left as a mystery as to which items are allocated on the heap. The "object" types this library provides largely have an `..._unref()` command, yet it requires trial and error to surmise this important memory status.

I also believe the best documentation is code that documents itself.

:::
::::::

#### Lessons

::::::{.grid}
:::{.g-col-8 .g-start-3}

Working with `tickit` has given me a lot of experience with working 
in unfamiliar territory. Additionally, I had not before used any libraries like this,
providing primitive object and event behavior within C. 
Member functions are replicated with structs passed as pointers, side effects the goal with 
little safety save for the compiler type checker and runtime memory safety. Don't worry C, 
you're still cool.
Makes me understand the significance of the choices made within the construction of
object oriented programming languages, such as member functions providing API. 

:::
::::::
